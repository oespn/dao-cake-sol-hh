/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface DAOCakeInterface extends utils.Interface {
  functions: {
    "createClaim(bytes32,bytes32,string,string,int16)": FunctionFragment;
    "createOrg(bytes32,string,string,string)": FunctionFragment;
    "getMembersOfOrg(bytes32)": FunctionFragment;
    "getOrg(bytes32)": FunctionFragment;
    "simpleAddMe(bytes32,string)": FunctionFragment;
    "simpleAddMember(bytes32,bytes32,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createClaim"
      | "createOrg"
      | "getMembersOfOrg"
      | "getOrg"
      | "simpleAddMe"
      | "simpleAddMember"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createClaim",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrg",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMembersOfOrg",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrg",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "simpleAddMe",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "simpleAddMember",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "createClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createOrg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMembersOfOrg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "simpleAddMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simpleAddMember",
    data: BytesLike
  ): Result;

  events: {};
}

export interface DAOCake extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAOCakeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createClaim(
      proposalKey: PromiseOrValue<BytesLike>,
      orgKey: PromiseOrValue<BytesLike>,
      refNo: PromiseOrValue<string>,
      docId: PromiseOrValue<string>,
      douAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOrg(
      orgKey: PromiseOrValue<BytesLike>,
      orgName: PromiseOrValue<string>,
      orgRef: PromiseOrValue<string>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getMembersOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { array: string[] }>;

    getOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number] & {
        name: string;
        ref: string;
        memberKey: string;
        members: number;
        voteForRequired: number;
      }
    >;

    simpleAddMe(
      orgKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    simpleAddMember(
      orgKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createClaim(
    proposalKey: PromiseOrValue<BytesLike>,
    orgKey: PromiseOrValue<BytesLike>,
    refNo: PromiseOrValue<string>,
    docId: PromiseOrValue<string>,
    douAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOrg(
    orgKey: PromiseOrValue<BytesLike>,
    orgName: PromiseOrValue<string>,
    orgRef: PromiseOrValue<string>,
    memberName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getMembersOfOrg(
    orgKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getOrg(
    orgKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, number] & {
      name: string;
      ref: string;
      memberKey: string;
      members: number;
      voteForRequired: number;
    }
  >;

  simpleAddMe(
    orgKey: PromiseOrValue<BytesLike>,
    memberName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  simpleAddMember(
    orgKey: PromiseOrValue<BytesLike>,
    memberKey: PromiseOrValue<BytesLike>,
    memberName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createClaim(
      proposalKey: PromiseOrValue<BytesLike>,
      orgKey: PromiseOrValue<BytesLike>,
      refNo: PromiseOrValue<string>,
      docId: PromiseOrValue<string>,
      douAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOrg(
      orgKey: PromiseOrValue<BytesLike>,
      orgName: PromiseOrValue<string>,
      orgRef: PromiseOrValue<string>,
      memberName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getMembersOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number] & {
        name: string;
        ref: string;
        memberKey: string;
        members: number;
        voteForRequired: number;
      }
    >;

    simpleAddMe(
      orgKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    simpleAddMember(
      orgKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    createClaim(
      proposalKey: PromiseOrValue<BytesLike>,
      orgKey: PromiseOrValue<BytesLike>,
      refNo: PromiseOrValue<string>,
      docId: PromiseOrValue<string>,
      douAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOrg(
      orgKey: PromiseOrValue<BytesLike>,
      orgName: PromiseOrValue<string>,
      orgRef: PromiseOrValue<string>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getMembersOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    simpleAddMe(
      orgKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    simpleAddMember(
      orgKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createClaim(
      proposalKey: PromiseOrValue<BytesLike>,
      orgKey: PromiseOrValue<BytesLike>,
      refNo: PromiseOrValue<string>,
      docId: PromiseOrValue<string>,
      douAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOrg(
      orgKey: PromiseOrValue<BytesLike>,
      orgName: PromiseOrValue<string>,
      orgRef: PromiseOrValue<string>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getMembersOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    simpleAddMe(
      orgKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    simpleAddMember(
      orgKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
