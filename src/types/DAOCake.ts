/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export declare namespace DAOCake_Entities {
  export type ProposalReturnStruct = {
    orgKey: PromiseOrValue<BytesLike>;
    memberKey: PromiseOrValue<BytesLike>;
    name: PromiseOrValue<string>;
    uuid: PromiseOrValue<string>;
    doc_cid: PromiseOrValue<string>;
    ref_id: PromiseOrValue<string>;
    total: PromiseOrValue<BigNumberish>;
    nVotes: PromiseOrValue<BigNumberish>;
    proposalType: PromiseOrValue<BigNumberish>;
    decision: PromiseOrValue<BigNumberish>;
  };

  export type ProposalReturnStructOutput = [
    string,
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    number,
    number,
    number
  ] & {
    orgKey: string;
    memberKey: string;
    name: string;
    uuid: string;
    doc_cid: string;
    ref_id: string;
    total: BigNumber;
    nVotes: number;
    proposalType: number;
    decision: number;
  };

  export type VoteStructStruct = {
    proposalKey: PromiseOrValue<BytesLike>;
    memberKey: PromiseOrValue<BytesLike>;
    voteFor: PromiseOrValue<boolean>;
  };

  export type VoteStructStructOutput = [string, string, boolean] & {
    proposalKey: string;
    memberKey: string;
    voteFor: boolean;
  };
}

export interface DAOCakeInterface extends utils.Interface {
  functions: {
    "castVote(bytes32,bytes32,bytes32,bool)": FunctionFragment;
    "castVoteAsMember(bytes32,bytes32,bytes32,bytes32,bool)": FunctionFragment;
    "createClaim(bytes32,bytes32,string,string,string,string,uint256)": FunctionFragment;
    "createOrg(bytes32,string,string,string)": FunctionFragment;
    "getApprovedMembersOfOrg(bytes32)": FunctionFragment;
    "getMembersOfOrg(bytes32)": FunctionFragment;
    "getOrg(bytes32)": FunctionFragment;
    "getProposalData(bytes32)": FunctionFragment;
    "getProposalsOfOrg(bytes32)": FunctionFragment;
    "getProposalsOfOrgData(bytes32)": FunctionFragment;
    "getVotesOfProposal(bytes32)": FunctionFragment;
    "getVotesOfProposalData(bytes32)": FunctionFragment;
    "simpleAddMe(bytes32,string)": FunctionFragment;
    "simpleAddMember(bytes32,bytes32,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "castVote"
      | "castVoteAsMember"
      | "createClaim"
      | "createOrg"
      | "getApprovedMembersOfOrg"
      | "getMembersOfOrg"
      | "getOrg"
      | "getProposalData"
      | "getProposalsOfOrg"
      | "getProposalsOfOrgData"
      | "getVotesOfProposal"
      | "getVotesOfProposalData"
      | "simpleAddMe"
      | "simpleAddMember"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "castVote",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteAsMember",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createClaim",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrg",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getApprovedMembersOfOrg",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMembersOfOrg",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrg",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalsOfOrg",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalsOfOrgData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotesOfProposal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotesOfProposalData",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "simpleAddMe",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "simpleAddMember",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteAsMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createOrg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getApprovedMembersOfOrg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMembersOfOrg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOrg", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProposalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalsOfOrg",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalsOfOrgData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotesOfProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotesOfProposalData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simpleAddMe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "simpleAddMember",
    data: BytesLike
  ): Result;

  events: {};
}

export interface DAOCake extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DAOCakeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    castVote(
      orgKey: PromiseOrValue<BytesLike>,
      voteKey: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    castVoteAsMember(
      orgKey: PromiseOrValue<BytesLike>,
      voteKey: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createClaim(
      proposalKey: PromiseOrValue<BytesLike>,
      orgKey: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      uuid: PromiseOrValue<string>,
      doc_cid: PromiseOrValue<string>,
      ref_id: PromiseOrValue<string>,
      douAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createOrg(
      orgKey: PromiseOrValue<BytesLike>,
      orgName: PromiseOrValue<string>,
      orgRef: PromiseOrValue<string>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getApprovedMembersOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { array: string[] }>;

    getMembersOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { array: string[] }>;

    getOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number] & {
        name: string;
        ref: string;
        memberKey: string;
        members: number;
        voteForRequired: number;
      }
    >;

    getProposalData(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [DAOCake_Entities.ProposalReturnStructOutput] & {
        r: DAOCake_Entities.ProposalReturnStructOutput;
      }
    >;

    getProposalsOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { array: string[] }>;

    getProposalsOfOrgData(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[DAOCake_Entities.ProposalReturnStructOutput[]]>;

    getVotesOfProposal(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]] & { array: string[] }>;

    getVotesOfProposalData(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[DAOCake_Entities.VoteStructStructOutput[]]>;

    simpleAddMe(
      orgKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    simpleAddMember(
      orgKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  castVote(
    orgKey: PromiseOrValue<BytesLike>,
    voteKey: PromiseOrValue<BytesLike>,
    proposalKey: PromiseOrValue<BytesLike>,
    voteFor: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  castVoteAsMember(
    orgKey: PromiseOrValue<BytesLike>,
    voteKey: PromiseOrValue<BytesLike>,
    proposalKey: PromiseOrValue<BytesLike>,
    memberKey: PromiseOrValue<BytesLike>,
    voteFor: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createClaim(
    proposalKey: PromiseOrValue<BytesLike>,
    orgKey: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<string>,
    uuid: PromiseOrValue<string>,
    doc_cid: PromiseOrValue<string>,
    ref_id: PromiseOrValue<string>,
    douAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createOrg(
    orgKey: PromiseOrValue<BytesLike>,
    orgName: PromiseOrValue<string>,
    orgRef: PromiseOrValue<string>,
    memberName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getApprovedMembersOfOrg(
    orgKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getMembersOfOrg(
    orgKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getOrg(
    orgKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, number, number] & {
      name: string;
      ref: string;
      memberKey: string;
      members: number;
      voteForRequired: number;
    }
  >;

  getProposalData(
    proposalKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<DAOCake_Entities.ProposalReturnStructOutput>;

  getProposalsOfOrg(
    orgKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getProposalsOfOrgData(
    orgKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<DAOCake_Entities.ProposalReturnStructOutput[]>;

  getVotesOfProposal(
    proposalKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getVotesOfProposalData(
    proposalKey: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<DAOCake_Entities.VoteStructStructOutput[]>;

  simpleAddMe(
    orgKey: PromiseOrValue<BytesLike>,
    memberName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  simpleAddMember(
    orgKey: PromiseOrValue<BytesLike>,
    memberKey: PromiseOrValue<BytesLike>,
    memberName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    castVote(
      orgKey: PromiseOrValue<BytesLike>,
      voteKey: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    castVoteAsMember(
      orgKey: PromiseOrValue<BytesLike>,
      voteKey: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    createClaim(
      proposalKey: PromiseOrValue<BytesLike>,
      orgKey: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      uuid: PromiseOrValue<string>,
      doc_cid: PromiseOrValue<string>,
      ref_id: PromiseOrValue<string>,
      douAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createOrg(
      orgKey: PromiseOrValue<BytesLike>,
      orgName: PromiseOrValue<string>,
      orgRef: PromiseOrValue<string>,
      memberName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getApprovedMembersOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getMembersOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, number, number] & {
        name: string;
        ref: string;
        memberKey: string;
        members: number;
        voteForRequired: number;
      }
    >;

    getProposalData(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<DAOCake_Entities.ProposalReturnStructOutput>;

    getProposalsOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getProposalsOfOrgData(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<DAOCake_Entities.ProposalReturnStructOutput[]>;

    getVotesOfProposal(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getVotesOfProposalData(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<DAOCake_Entities.VoteStructStructOutput[]>;

    simpleAddMe(
      orgKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    simpleAddMember(
      orgKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    castVote(
      orgKey: PromiseOrValue<BytesLike>,
      voteKey: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    castVoteAsMember(
      orgKey: PromiseOrValue<BytesLike>,
      voteKey: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createClaim(
      proposalKey: PromiseOrValue<BytesLike>,
      orgKey: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      uuid: PromiseOrValue<string>,
      doc_cid: PromiseOrValue<string>,
      ref_id: PromiseOrValue<string>,
      douAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createOrg(
      orgKey: PromiseOrValue<BytesLike>,
      orgName: PromiseOrValue<string>,
      orgRef: PromiseOrValue<string>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getApprovedMembersOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMembersOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalData(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalsOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProposalsOfOrgData(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotesOfProposal(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotesOfProposalData(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    simpleAddMe(
      orgKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    simpleAddMember(
      orgKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    castVote(
      orgKey: PromiseOrValue<BytesLike>,
      voteKey: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    castVoteAsMember(
      orgKey: PromiseOrValue<BytesLike>,
      voteKey: PromiseOrValue<BytesLike>,
      proposalKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      voteFor: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createClaim(
      proposalKey: PromiseOrValue<BytesLike>,
      orgKey: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      uuid: PromiseOrValue<string>,
      doc_cid: PromiseOrValue<string>,
      ref_id: PromiseOrValue<string>,
      douAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createOrg(
      orgKey: PromiseOrValue<BytesLike>,
      orgName: PromiseOrValue<string>,
      orgRef: PromiseOrValue<string>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getApprovedMembersOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMembersOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalData(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalsOfOrg(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProposalsOfOrgData(
      orgKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotesOfProposal(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotesOfProposalData(
      proposalKey: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    simpleAddMe(
      orgKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    simpleAddMember(
      orgKey: PromiseOrValue<BytesLike>,
      memberKey: PromiseOrValue<BytesLike>,
      memberName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
